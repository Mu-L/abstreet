searchState.loadedDescShard("santa", 0, "Replace the entire stack of states with this stack.\nThis destroys the current state, running the callback on …\nDon’t do anything, keep the current state as the active …\nKeep the current state as the active one, but immediately …\nIf a state needs to pass data back to its parent, use …\nExecute a sequence of transitions in order.\nDestroy the current state, and resume from the previous one\nPush a new active state on the top of the stack.\nCall <code>State::recreate</code> on the current top of the stack\nReplace the current state with a new one. Equivalent to …\nCustom per-app state can be stored here\nIf desired, this can be advanced to render traffic signals …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPass in a future value for <code>now</code> to schedule a delayed effect\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhich of the 8 directions are we facing, based on the last …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs the player currently on a road with a bus or bike lane?\nFor the game over animation\nReturns any buildings we passed\nPersistent state that lasts across levels.\nEnable this to use the levels, instead of overwriting them …\nReturns the argument unchanged.\nReturns the argument unchanged.\nLevel title -&gt; the top 3 scores\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf a message is returned, a new level and some powers were …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n(max speed, max energy)")